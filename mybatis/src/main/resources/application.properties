#端口
server.port=8082
# 编码格式
server.tomcat.uri-encoding=utf-8
#jsp
spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp
######### 分页插件 ##########
pagehelper.helper-dialect=mysql
pagehelper.params=count=countSql
pagehelper.reasonable=false
pagehelper.support-methods-arguments=true
#数据库相关配置
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.datasource.url=jdbc:mysql://localhost:3306/mytest?serverTimezone=UTC
#spring.datasource.username=root
#spring.datasource.password=123456
#spring.datasource.max-idle=10
#spring.datasource.max-wait=10000
#spring.datasource.min-idle=5
#spring.datasource.initial-size=5
mybatis.mapper-locations=classpath:mapping/*.xml
mybatis.type-aliases-package=com.example.demo.entity
spring.main.allow-bean-definition-overriding=true
#sharding配置
spring.shardingsphere.datasource.names=ds
spring.shardingsphere.datasource.ds.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds.jdbc-url=jdbc:mysql://localhost:3306/mytest?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
spring.shardingsphere.datasource.ds.username=root
spring.shardingsphere.datasource.ds.password=123456
#user表 分表
spring.shardingsphere.sharding.tables.user.actual-data-nodes=ds.user_$->{0..2}
#分片键
spring.shardingsphere.sharding.tables.user.table-strategy.inline.sharding-column=id
#分片算法 行表达式内部的表达式本质上是一段 Groovy 代码 字符串操作 ${id[0]}${id.getAt(0)}
spring.shardingsphere.sharding.tables.user.table-strategy.inline.algorithm-expression=user_$->{id % 3} 
#采用自带的雪花id算法 内置的分布式主键生成器 例如 UUID、SNOWFLAKE 如果是更复杂的算法使用抽离出分布式主键生成器的接口，方便用户自行实现自定义的自增主键生成器
#spring.shardingsphere.sharding.tables.user.key-generator.column=id
#spring.shardingsphere.sharding.tables.user.key-generator.type=SNOWFLAKE
#打印sql
spring.shardingsphere.props.sql.show=true





